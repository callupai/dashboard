import { AppConfigProvider, TokenGetter } from "./interface";
import ActionManager from "./actionmanager";
export declare class WorldManager {
    columnKeysCache: {};
    stateMachines: {};
    stateMachineEnabled: {};
    streams: {};
    appConfig: AppConfigProvider;
    jsonApi: any;
    actionManager: ActionManager;
    columnTypes: any;
    worlds: any;
    systemActions: any;
    modelLoader: (string: string, any) => void;
    tokenGetter: TokenGetter;
    constructor(appConfig: AppConfigProvider, tokenGetter: TokenGetter, jsonApi: any, actionManager: ActionManager);
    init(): void;
    getStateMachinesForType(typeName: any): Promise<{}>;
    startObjectTrack(objType: any, objRefId: any, stateMachineRefId: any): Promise<{}>;
    trackObjectEvent(typeName: any, stateMachineRefId: any, eventName: any): Promise<{}>;
    getColumnKeys(typeName: any, callback: any): void;
    getColumnFieldTypes(): any;
    isStateMachineEnabled(typeName: any): boolean;
    getColumnKeysWithErrorHandleWithThisBuilder(logoutHandler: any): (string, any) => void;
    GetJsonApiModel(columnModel: any): {};
    getWorlds(): any;
    getWorldByName(name: any): any;
    getSystemActions(): any;
    loadModel(modelName: any): Promise<{}>;
    loadModels(): Promise<{}>;
}
export default WorldManager;
